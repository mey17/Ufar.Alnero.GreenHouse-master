@page "/technical-description"
@rendermode InteractiveServer

<PageTitle>Technical Description</PageTitle>

<div class="container">
    <h1>Technical Description</h1>
    <p>Customize your smart greenhouse system by selecting sensor components and providing greenhouse size.</p>
    <form @onsubmit="CalculateOrder">
        <div class="form-group">
            <div style="display: flex; justify-content:space-between;">
                <label for="greenhouseSize">Greenhouse Size (in square meters)</label>
                <input @bind="greenhouseSize" min="5" max="5000" type="number" style="width: 100px;" class="form-control" id="greenhouseSize" placeholder="m^2">
                <label for="greenhouseRows">Greenhouse rows</label>
                <input @bind="greenhouseRows" min="1" max="50" type="number" style="width: 80px;" class="form-control" id="greenhouseRows" placeholder="10..30..40">
                <label for="greenhouseRowMeter">Greenhouse row in meters</label>
                <input @bind="greenhouseRowMeter" min="1" max="350" type="number" style="width: 80px;" class="form-control" id="greenhouseRowMeter" placeholder="m">
            </div>
        </div>

        <table>
            <thead>
                <tr>
                    <th>Image</th>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Price ($)</th>
                    <th>Select</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var sensor in sensorComponents)
                {
                    <tr>
                        <td><img src="@sensor.ImagePath" alt="@sensor.Name" width="100"></td>
                        <td>@sensor.Name</td>
                        <td>@sensor.Description</td>
                        <td>@sensor.Price</td>
                        <td><input type="checkbox" name="selectedSensors" @bind="sensor.Selected" value="@sensor.Value"></td>
                    </tr>
                }
            </tbody>
        </table>

        <button type="submit" class="btn btn-primary">Submit</button>
    </form>

    @if (showOrder)
    {
        <h2>Selected Items</h2>
        <table class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Quantity</th>
                    <th>Individual Price ($)</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var selectedSensor in selectedSensors)
                {
                    <tr>
                        <td>@selectedSensor.Name</td>
                        <td>@selectedSensor.Quantity</td>
                        <td>@selectedSensor.IndividualPrice</td>
                    </tr>
                }
            </tbody>
            <tfoot>
                <tr>
                    <th>Total Price:</th>
                    <th></th>
                    <th>@totalPrice</th>
                </tr>
            </tfoot>
        </table>
    }
</div>

@code {
    public class SensorComponent
    {
        public string Name { get; set; }
        public string Description { get; set; }
        public double Price { get; set; }
        public string ImagePath { get; set; }
        public bool Selected { get; set; }
        public string Value { get; set; }
    }

    public class SelectedSensor
    {
        public string Name { get; set; }
        public int Quantity { get; set; }
        public double IndividualPrice { get; set; }
    }

   
    private List<SensorComponent> sensorComponents = new List<SensorComponent>
    {
        new SensorComponent { Name = "Temperature Sensor", Description = "Monitors temperature inside the greenhouse.", Price = 5, ImagePath = "/dht_sensor.png" },
        new SensorComponent { Name = "Ventilator", Description = "Provides air circulation inside the greenhouse.", Price = 35, ImagePath = "/ventilator_sensor.jpg" },
        new SensorComponent { Name = "Light Sensor", Description = "Detects outside light intensity to adjust internal lighting.", Price = 3, ImagePath = "/lightsensor.png" },
        new SensorComponent { Name = "LED Lights", Description = "Provides artificial lighting for plants.", Price = 15, ImagePath = "/LED-Light.jpg" },
        new SensorComponent { Name = "Water Sensor & Pump", Description = "Monitors soil moisture.", Price = 5, ImagePath = "/water_sensor.png" },
        new SensorComponent { Name = "Water Pump", Description = "Provides water accordingly.", Price = 15, ImagePath = "/water_pump.png" },
        new SensorComponent { Name = "Remote Controller", Description = "Controls doors or windows remotely for ventilation.", Price = 40, ImagePath = "/remote.jpg" }
    };

    private double greenhouseSize;
    private int greenhouseRows;
    private double greenhouseRowMeter;

    private List<SelectedSensor> selectedSensors = new List<SelectedSensor>();
    private bool showOrder = false;
    private double totalPrice = 0;

    
    private void CalculateOrder()
    {
        selectedSensors.Clear();
        totalPrice = 0;

        foreach (var sensor in sensorComponents)
        {
            if (sensor.Selected)
            {
                selectedSensors.Add(new SelectedSensor
                    {
                        Name = sensor.Name,
                        Quantity = CalculateQuantity(sensor.Name),
                        IndividualPrice = sensor.Price
                    });
                totalPrice += CalculateQuantity(sensor.Name) * sensor.Price;
            }
        }

        showOrder = true;
    }

    
    private int CalculateQuantity(string sensorName)
    {
        switch (sensorName)
        {
            case "Temperature Sensor":
                return greenhouseSize <= 100 ? 1 : (int)Math.Ceiling(greenhouseSize / 100);
            case "Ventilator":
                return greenhouseSize <= 200 ? 1 : (int)Math.Ceiling(greenhouseSize / 200);
            case "Light Sensor":
                return greenhouseSize <= 50 ? 1 : 3;
            case "LED Lights":
                return greenhouseRows;
            case "Water Sensor & Pump":
                return 3 * greenhouseRows;
            case "Water Pump":
                return greenhouseRows;
            case "Remote Controller":
                return 1;
            default:
                return 0;
        }
    }
}
